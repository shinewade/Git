flow BT_RX_GRP {

    setup {
        suite RESET_RESETN calls BT1502_pro_tml.FUNC.RESET_RESETN {
            spec_measurement = setupRef(mainSpecs.Spec_I2C);
        }
        suite UART_INIT calls BT1502_pro_tml.FUNC.UART_INIT{
           spec_measurement = setupRef(mainSpecs.Spec_I2C);
           spec_measurement_UART = setupRef(mainSpecs.Spec_UART);
        }
        suite DCDC_PowerOn calls BT1502_pro_tml.DC.DCDC_PowerOn_2700 {
            spec_measurement = setupRef(mainSpecs.Spec_I2C);
         }
        suite BT_RX_Current calls BT1502_pro_tml.BT.BT_RX_Current {
            spec_measurement = setupRef(mainSpecs.Spec_I2C);
        }

        /********** BT RX ADDA Active **************/
        suite BT_RX_LOFreq_L_Active calls BT1502_pro_tml.BT.BT_RX_LOFreq_Dyn {
            spec_measurement = setupRef(mainSpecs.Spec_I2C);
            freq = 2402;
            rxPWR = - 61;   //input-70 ~500mV SNR 32~35
            rxMode="Active";    //Active, Passive
        }

        suite BT_RX_LOFreq_L_Active_RT1 calls BT1502_pro_tml.BT.BT_RX_LOFreq_Dyn {
            spec_measurement = setupRef(mainSpecs.Spec_I2C);
            freq = 2402;
            rxPWR = - 61;
            rxMode="Active";    //Active, Passive
        }

        suite BT_RX_LOFreq_M_Active calls BT1502_pro_tml.BT.BT_RX_LOFreq_Dyn {
            spec_measurement = setupRef(mainSpecs.Spec_I2C);
            freq = 2441;
            rxPWR = - 61;
            rxMode="Active";    //Active, Passive
        }

        suite BT_RX_LOFreq_M_Active_RT1 calls BT1502_pro_tml.BT.BT_RX_LOFreq_Dyn {
            spec_measurement = setupRef(mainSpecs.Spec_I2C);
            freq = 2441;
            rxPWR = - 61;
            rxMode="Active";    //Active, Passive
        }

        suite BT_RX_LOFreq_H_Active calls BT1502_pro_tml.BT.BT_RX_LOFreq_Dyn {
            spec_measurement = setupRef(mainSpecs.Spec_I2C);
            freq = 2480;
            rxPWR = - 61;
            rxMode="Active";    //Active, Passive
        }

        suite BT_RX_LOFreq_H_Active_RT1 calls BT1502_pro_tml.BT.BT_RX_LOFreq_Dyn {
            spec_measurement = setupRef(mainSpecs.Spec_I2C);
            freq = 2480;
            rxPWR = - 61;
            rxMode="Active";    //Active, Passive
        }

        /********** BT RX ADDA Passive **************/
        suite RX_PASSIVE_MODE calls BT1502_pro_tml.BT.BT_RX_PASSIVE {
            spec_measurement = setupRef(mainSpecs.Spec_I2C);

        }


        suite BT_RX_LOFreq_L_Passive calls BT1502_pro_tml.BT.BT_RX_LOFreq_Dyn {
            spec_measurement = setupRef(mainSpecs.Spec_I2C);
            freq = 2402;
            rxPWR = - 52;   //input-70 ~500mV SNR 32~35
            rxMode="Passive";    //Passive, Passive
        }

        suite BT_RX_LOFreq_L_Passive_RT1 calls BT1502_pro_tml.BT.BT_RX_LOFreq_Dyn {
            spec_measurement = setupRef(mainSpecs.Spec_I2C);
            freq = 2402;
            rxPWR = - 52;
            rxMode="Passive";    //Passive, Passive
        }

        suite BT_RX_LOFreq_M_Passive calls BT1502_pro_tml.BT.BT_RX_LOFreq_Dyn {
            spec_measurement = setupRef(mainSpecs.Spec_I2C);
            freq = 2441;
            rxPWR = - 50;
            rxMode="Passive";    //Passive, Passive
        }

        suite BT_RX_LOFreq_M_Passive_RT1 calls BT1502_pro_tml.BT.BT_RX_LOFreq_Dyn {
            spec_measurement = setupRef(mainSpecs.Spec_I2C);
            freq = 2441;
            rxPWR = - 50;
            rxMode="Passive";    //Passive, Passive
        }

        suite BT_RX_LOFreq_H_Passive calls BT1502_pro_tml.BT.BT_RX_LOFreq_Dyn {
            spec_measurement = setupRef(mainSpecs.Spec_I2C);
            freq = 2480;
            rxPWR = - 50;
            rxMode="Passive";    //Passive, Passive
        }

        suite BT_RX_LOFreq_H_Passive_RT1 calls BT1502_pro_tml.BT.BT_RX_LOFreq_Dyn {
            spec_measurement = setupRef(mainSpecs.Spec_I2C);
            freq = 2480;
            rxPWR = - 50;
            rxMode="Passive";    //Passive, Passive
        }
    }


    execute {
        BT_RX_Current.execute();

        //Active
        BT_RX_LOFreq_L_Active.suppressBinning=true;
        BT_RX_LOFreq_L_Active.execute();
        if (BT_RX_LOFreq_L_Active.pass == false) {
            BT_RX_LOFreq_L_Active_RT1.execute();
        }

        BT_RX_LOFreq_M_Active.suppressBinning=true;
        BT_RX_LOFreq_M_Active.execute();
        if (BT_RX_LOFreq_M_Active.pass == false) {
            BT_RX_LOFreq_M_Active_RT1.execute();
        }

        BT_RX_LOFreq_H_Active.suppressBinning=true;
        BT_RX_LOFreq_H_Active.execute();
        if (BT_RX_LOFreq_H_Active.pass == false) {
            BT_RX_LOFreq_H_Active_RT1.execute();
        }

        //Passive

        BT_RX_LOFreq_L_Passive.suppressBinning=true;
        BT_RX_LOFreq_L_Passive.execute();
        if (BT_RX_LOFreq_L_Passive.pass == false) {
            BT_RX_LOFreq_L_Passive_RT1.execute();
        }

        BT_RX_LOFreq_M_Passive.suppressBinning=true;
        BT_RX_LOFreq_M_Passive.execute();
        if (BT_RX_LOFreq_M_Passive.pass == false) {
            BT_RX_LOFreq_M_Passive_RT1.execute();
        }

        BT_RX_LOFreq_H_Passive.suppressBinning=true;
        BT_RX_LOFreq_H_Passive.execute();
        if (BT_RX_LOFreq_H_Passive.pass == false) {
            BT_RX_LOFreq_H_Passive_RT1.execute();
        }


    }
}
